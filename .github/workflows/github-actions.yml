#Github Repository Actions Name
name: Java CI with Gradle

#Event Trigger
on:
  push:
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-application:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      #JDK Setting
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      #Gradle Caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      #Create application-local.yml
      - name: Make application-local.yml
        if: contains(github.ref, 'main')
        run: |
          cd ./p-application/src/main/resources
          touch ./application.yml
          echo "${{ secrets.YAML_LOCAL }}" > ./application.yml
        shell: bash

      #Gradle Build
      - name: Build with Gradle
        run: ./gradlew build -x test

      #Docker Build & Push to local
      - name: Docker build & push to local
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_ID_REPOSITORY }} .
          docker push ${{ secrets.DOCKERHUB_ID_REPOSITORY }}

      #Deploy to local
      - name: Deploy to local
        uses: appleboy/ssh-action@master
        id: deploy-local
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.EC2_HOST_DNS }}
          username: ${{ secrets.EC2_ID }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_PORT }}
#          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_ID_REPOSITORY }}
            sudo docker run ${{ secrets.DOCKERHUB_ID_REPOSITORY }}
            docker image prune -a -f

  #Time
  current-time:
    needs: build-application
    runs-on: ubuntu-22.04
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash