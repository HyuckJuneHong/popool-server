name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Latest Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant Execute Permsission for Gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Print Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        shell: bash

      #--여기까지--

      #Gradle Caching
#      - name: Gradle Caching
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      #Create application-local.yml
#      - name: Make application-local.yml
#        run: |
#          cd ./p-application/src/main/resources
#          touch ./application.yml
#          echo "${{ secrets.YAML_LOCAL }}" > ./application.yml
#        shell: bash

      #Docker Build & Push to local
#      - name: Docker build & push to local
#        run: |
#          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
#          docker build -t ${{ secrets.DOCKERHUB_ID_REPOSITORY }} .
#          docker push ${{ secrets.DOCKERHUB_ID_REPOSITORY }}

      #Deploy to local (Beanstalk 플러그인 사용, IAM 인증키 사용)
#      - name: Beanstalk Deploy to local
#        uses: einaregilsson/beanstalk-deploy@v20
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
#          application_name: Popool-SpringBoot-WebServiceEnvironmentTier
#          environment_name: Popool-WebServiceEnvironmentTier
#          region: ${{ secrets.AWS_REGION }}
#          deployment_package: Dockerrun.aws.json